<?xml version="1.0"?>
<project basedir="." name="sf" xmlns:sf="antlib:com.salesforce">
    <import file="${basedir}/../../common/lib/ant-salesforce.xml"/>
    <taskdef classpath="${basedir}/../../common/lib/ant-salesforce.jar" resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce"/>
    <taskdef classname="com.sardak.antform.AntForm" classpath="${basedir}/../../common/lib/antform.jar" name="antform"/>
    <taskdef classname="com.sardak.antform.AntMenu" classpath="${basedir}/../../common/lib/antform.jar" name="antmenu"/>
    <macrodef name="make-load">
        <attribute name="object"/>
        <attribute name="operation"/>
        <attribute name="map"/>
        <attribute name="load"/>
        <attribute default="normal" name="process-file"/>
        <attribute default="" name="extid"/>
        <attribute default="" name="soql"/>
        <attribute default="" name="bulkapi"/>
        <sequential>
            <tstamp>
                <format pattern="yyyyMMdd_HHmmss" property="tstamp"/>
            </tstamp>
            <mkdir dir="tmp-@{operation}"/>
            <copy failonerror="true" file="config/@{process-file}-process-conf.xml" overwrite="true" tofile="tmp-@{operation}/config/process-conf.xml"/>
            <copy failonerror="true" file="config/config.properties" overwrite="true" tofile="tmp-@{operation}/config/config.properties"/>
            <java classname="com.salesforce.dataloader.security.EncryptionUtil" classpath="${basedir}/../common/lib/Dataloader.jar" failonerror="true" outputproperty="encpassword1">
                <arg line="-e ${sf.password}"/>
            </java>
            <propertyregex input="${encpassword1}" property="encpassword" regexp="\s(\w+)$" select="\1"/>
            <replace file="tmp-@{operation}/config/process-conf.xml">
                <replacefilter token="_operation_" value="@{operation}"/>
                <replacefilter token="_username_" value="${sf.username}"/>
                <replacefilter token="_password_" value="${encpassword}"/>
                <replacefilter token="_serverurl_" value="${sf.serverurl}"/>
                <replacefilter token="_object_" value="@{object}"/>
                <replacefilter token="_map_" value="@{map}"/>
                <replacefilter token="_infile_" value="@{load}"/>
                <replacefilter token="_extid_" value="@{extid}"/>
                <replacefilter token="_soql_" value="@{soql}"/>
                <replacefilter token="_tstamp_" value="${tstamp}"/>
                <replacefilter token="_bulkapi_" value="@{bulkapi}"/>
            </replace>
            <java classname="com.salesforce.dataloader.process.ProcessRunner" classpath="${basedir}/../common/lib/Dataloader.jar" failonerror="true">
                <sysproperty key="salesforce.config.dir" value="tmp-@{operation}/config"/>
                <arg line="process.name=@{object}@{operation}"/>
            </java>
            <delete dir="tmp-@{operation}"/>
        </sequential>
    </macrodef>
    <macrodef name="sfupsert">
        <attribute name="object"/>
        <attribute name="map"/>
        <attribute name="load"/>
        <attribute name="extid"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load extid="@{extid}" load="@{load}" map="@{map}" object="@{object}" operation="upsert" process-file="upsert"/>
        </sequential>
    </macrodef>
    <macrodef name="sfextract">
        <attribute name="object"/>
        <attribute name="load"/>
        <attribute name="soql"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load bulkapi="@{bulkapi}" load="@{load}" map="" object="@{object}" operation="extract" process-file="extract" soql="@{soql}"/>
        </sequential>
    </macrodef>
    <macrodef name="sfinsert">
        <attribute name="object"/>
        <attribute name="map"/>
        <attribute name="load"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load bulkapi="@{bulkapi}" load="@{load}" map="@{map}" object="@{object}" operation="insert"/>
        </sequential>
    </macrodef>
    <macrodef name="sfupdate">
        <attribute name="object"/>
        <attribute name="map"/>
        <attribute name="load"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load bulkapi="@{bulkapi}" load="@{load}" map="@{map}" object="@{object}" operation="update"/>
        </sequential>
    </macrodef>
    <macrodef name="sfdelete">
        <attribute name="object"/>
        <attribute name="map"/>
        <attribute name="load"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load bulkapi="@{bulkapi}" load="@{load}" map="@{map}" object="@{object}" operation="delete"/>
        </sequential>
    </macrodef>
    <macrodef name="sftouch">
        <attribute name="object"/>
        <attribute default="false" name="bulkapi"/>
        <sequential>
            <make-load bulkapi="@{bulkapi}" load="touchload" map="" object="@{object}" operation="extract" process-file="extract" soql="select Id from @{object}"/>
            <make-load bulkapi="@{bulkapi}" load="touchload" map="config/map/id_map" object="@{object}" operation="update"/>
            <delete file="touchload"/>
        </sequential>
    </macrodef>
    <target name="insert">
        <sfinsert bulkapi="false" load="${load}" map="${map}" object="${object}"/>
    </target>
    <target name="update">
        <sfupdate bulkapi="false" load="${load}" map="${map}" object="${object}"/>
    </target>
    <target name="delete">
        <sfdelete bulkapi="false" load="${load}" map="config/map/id_map" object="${object}"/>
    </target>
    <target name="extract">
        <loadfile property="soql" srcFile="queries/${soqlFile}"/>
        <sfextract bulkapi="${bulkapi}" load="${load}" object="${object}" soql="${soql}"/>
    </target>
    <target name="upsert">
        <sfupsert bulkapi="false" extid="${extid}" load="${load}" map="${map}" object="${object}"/>
    </target>
    <target name="touch">
        <sfextract bulkapi="false" load="touchload" object="${object}" soql="select Id from ${object}"/>
        <sfupdate bulkapi="false" load="touchload" map="config/map/id_map" object="${object}"/>
        <delete file="touchload"/>
    </target>
    <target name="make-new-deployment">
        <input addproperty="deployment.name" message="Deployment Name (no spaces):"/>
        <mkdir dir="deployments/${deployment.name}"/>
        <copy file="package.xml" toFile="deployments/${deployment.name}/package.xml"/>
    </target>
    <target depends="load-retrieve-environment,load-retrieve-root" name="retrieve">
        <sf:retrieve password="${retrieve.sf.password}" retrieveTarget="${retrieve.root}" serverurl="${retrieve.sf.serverurl}" unpackaged="${retrieve.root}/package.xml" username="${retrieve.sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="deploy-folder">
        <echo message="${deploy.root}"/>
        <if>
            <istrue value="{!skip.diff}"/>
            <then/>
            <else>
                <antcall target="sf.diff"/>
            </else>
        </if>
        <sf:deploy deployRoot="${deploy.root}" password="${deploy.sf.password}" serverurl="${deploy.sf.serverurl}" username="${deploy.sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="delete-folder">
        <echo message="${root}"/>
        <antcall target="sf.diff"/>
        <sf:deploy deployRoot="${deploy.root}" password="${deploy.sf.password}" serverurl="${deploy.sf.serverurl}" username="${sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="check-deploy">
        <antcall target="sf.diff"/>
        <sf:deploy checkOnly="true" deployRoot="${deploy.root}" password="${deploy.sf.password}" runAllTests="false" serverurl="${deploy.sf.serverurl}" username="${deploy.sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="check-unit-tests">
        <sf:deploy checkOnly="true" deployRoot="${deploy.root}" password="${deploy.sf.password}" runAllTests="true" serverurl="${deploy.sf.serverurl}" username="${sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="execute-script">
        <loadfile property="apex" srcFile="scripts/${scriptName}"/>
        <executeApex instanceurl="${deploy.sf.instanceurl}" password="${deploy.sf.password}" username="${deploy.sf.username}"><![CDATA[
               ${apex}
            ]]></executeApex>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="backup-files">
        <tstamp>
            <format pattern="yyyyMMdd_HHmmss" property="time.stamp"/>
        </tstamp>
        <mkdir dir="deployments/backup"/>
        <mkdir dir="deployments/backup/${time.stamp}"/>
        <copy file="${deploy.root}/package.xml" tofile="deployments/backup/${time.stamp}/package.xml"/>
        <sf:retrieve password="${deploy.sf.password}" retrieveTarget="deployments/backup/${time.stamp}" serverurl="${deploy.sf.serverurl}" unpackaged="deployments/backup/${time.stamp}/package.xml" username="${deploy.sf.username}"/>
    </target>
    <target depends="load-deploy-environment,load-deploy-root" name="diff">
        <tstamp>
            <format pattern="yyyyMMdd_HHmmss" property="time.stamp"/>
        </tstamp>
        <antcall target="sf.backup-files"/>
        <exec executable="diff" osfamily="unix" output="diff/${time.stamp}.diff" outputproperty="diff">
            <arg value="-riw"/>
            <arg value="--exclude=*package.xml"/>
            <arg value="deployments/backup/${time.stamp}"/>
            <arg value="${deploy.root}"/>
        </exec>
        <exec executable="subl" osfamily="unix">
            <arg value="diff/${time.stamp}.diff"/>
        </exec>
    </target>
    <target name="load-deploy-environment" unless="deploy.sf.username">
        <loadproperties srcFile="build.properties"/>
        <condition property="load.default.deploy.env">
            <and>
                <isset property="deploy.default.env"/>
                <not>
                    <isset property="config"/>
                </not>
            </and>
        </condition>
        <if>
            <istrue value="${load.default.deploy.env}"/>
            <then>
                <loadproperties prefix="deploy" srcFile="${deploy.default.env}"/>
            </then>
            <else>
                <property name="env.name" value="${user.dir}/env"/>
                <antform title="Directory Selection">
                    <label>Select the directory that contains your package.xml</label>
                    <fileSelectionProperty directoryChooser="false" label="Path: " property="env.name" required="true"/>
                </antform>
                <loadproperties prefix="deploy" srcFile="${env.name}"/>
                <propertyfile file="build.properties">
                    <entry key="deploy.default.env" value="${env.name}"/>
                </propertyfile>
            </else>
        </if>
    </target>
    <target name="load-retrieve-environment" unless="retrieve.sf.username">
        <loadproperties srcFile="build.properties"/>
        <condition property="load.retrieve.env">
            <and>
                <isset property="retrieve.default.env"/>
                <not>
                    <isset property="config"/>
                </not>
            </and>
        </condition>
        <if>
            <istrue value="${load.retrieve.env}"/>
            <then>
                <loadproperties prefix="retrieve" srcFile="${retrieve.default.env}"/>
            </then>
            <else>
                <property name="env.name" value="${user.dir}/env"/>
                <antform title="Directory Selection">
                    <label>Select the directory that contains your package.xml</label>
                    <fileSelectionProperty directoryChooser="false" label="Path: " property="env.name" required="true"/>
                </antform>
                <loadproperties prefix="retrieve" srcFile="${env.name}"/>
                <propertyfile file="build.properties">
                    <entry key="retrieve.default.env" value="${env.name}"/>
                </propertyfile>
            </else>
        </if>
    </target>
    <target name="load-deploy-root" unless="deploy.root">
        <loadproperties srcFile="build.properties"/>
        <condition property="load.default.deploy.root">
            <and>
                <isset property="deploy.default.root"/>
                <not>
                    <isset property="config"/>
                </not>
            </and>
        </condition>
        <if>
            <istrue value="${load.default.deploy.root}"/>
            <then>
                <property name="deploy.root" value="${deploy.default.root}"/>
            </then>
            <else>
                <property name="deploy.root" value="${user.dir}/deployments"/>
                <antform title="deploy Root Directory Selection">
                    <label>Select the directory that contains your package.xml</label>
                    <fileSelectionProperty directoryChooser="true" label="Path: " property="deploy.root" required="true"/>
                </antform>
                <propertyfile file="build.properties">
                    <entry key="deploy.default.root" value="${deploy.root}"/>
                </propertyfile>
            </else>
        </if>
    </target>
    <target name="load-retrieve-root" unless="retrieve.root">
        <loadproperties srcFile="build.properties"/>
        <condition property="load.retrieve.root">
            <and>
                <isset property="retrieve.default.root"/>
                <not>
                    <isset property="config"/>
                </not>
            </and>
        </condition>
        <if>
            <istrue value="${load.retrieve.root}"/>
            <then>
                <property name="retrieve.root" value="${retrieve.default.root}"/>
            </then>
            <else>
                <property name="retrieve.root" value="${user.dir}/deployments"/>
                <antform title="Retrieve Root Directory Selection">
                    <label>Select the directory that contains your package.xml</label>
                    <fileSelectionProperty directoryChooser="true" label="Path: " property="retrieve.root" required="true"/>
                </antform>
                <propertyfile file="build.properties">
                    <entry key="retrieve.default.root" value="${retrieve.root}"/>
                </propertyfile>
            </else>
        </if>
    </target>
    <target if="isPropFileAvaliable" name="load-property-file">
        <loadproperties srcFile="${propertyFileName}"/>
    </target>
    <target name="edit-environment">
        <input addproperty="propertyFileName" message="Environment Name (no spaces):"/>
        <available file="${propertyFileName}" property="isPropFileAvaliable"/>
        <antcall target="sf.load-property-file"/>
        <property name="sf.username" value=""/>
        <property name="sf.password" value=""/>
        <property name="sf.instanceurl" value="https://na8.salesforce.com"/>
        <input addproperty="username" defaultvalue="${sf.username}" message="User Name:"/>
        <input addproperty="password" defaultvalue="${sf.password}" message="Password + Security Token:"/>
        <input addproperty="instanceurl" defaultvalue="${sf.instanceurl}" message="Instance Url"/>
        <propertyfile file="${propertyFileName}">
            <entry key="sf.username" value="${username}"/>
            <entry key="sf.password" value="${password}"/>
            <entry key="sf.instanceurl" value="${instanceurl}"/>
        </propertyfile>
    </target>
</project>